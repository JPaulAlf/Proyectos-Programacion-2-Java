/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Capa_Vista;
 
import java.awt.Color; 
import java.awt.Dimension;
import  Capa_Logica_Negocios.*;
import java.awt.List;
import java.time.LocalDateTime;
import java.util.ArrayList;
import static java.util.Collections.list;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author johnpaul
 */
public class JDlgVentana_AdminCatalogo extends javax.swing.JDialog {
    
    // Hacen funcionar el archivo correctamente
    ContenidoAudioVisual contenidoAudioVisual=null;
    private String codigo;
    private TIPO_ADMIN_OPCION tipoAdministrador;
    
    private final int ANNO_ACTUAL= LocalDateTime.now().getYear();
    private final int ANNO_MINIMO=1960;
    
    // arraylist auxiliares
    private ArrayList <TIPOS_IDIOMAS> arrayIdiomas;
    private ArrayList <Temporada> arrayTemporada;
    private ArrayList <String>arrayDirectores=new ArrayList();
    
    
    DefaultListModel modeloOrigen  = new DefaultListModel();
      
      // contador de numero de temporada por el cual va   **NO SE USA
      private int contadorTemporada=1;
    
    
    public JDlgVentana_AdminCatalogo(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setTitle("Elaborado por John Paul Alfaro Carballo");
        this.setSize(new Dimension(700,525));
         this.jPnlDatosGenerales.setBackground(new Color(222,222,222,190));
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        
        this.arrayIdiomas= new ArrayList();
        this.arrayTemporada= new ArrayList();
        
           try {
            setIconImage(new ImageIcon(getClass().getResource("../Fondo_Pantalla_Ventanas/imagen.png")).getImage());
        } catch (Exception e) { }
                
    }
    public JDlgVentana_AdminCatalogo(String codigop, TIPO_ADMIN_OPCION tipo){
        this.codigo=codigop;
        this.tipoAdministrador=tipo;
        
           try {
        initComponents();
        this.setSize(new Dimension(700,525));
        this.jPnlDatosGenerales.setBackground(new Color(222,222,222,190));
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.arrayIdiomas= new ArrayList();
        this.arrayTemporada= new ArrayList();
        
        } catch (Exception e) {  }
           
            try {
            setIconImage(new ImageIcon(getClass().getResource("../Fondo_Pantalla_Ventanas/imagen.png")).getImage());
        } catch (Exception e) { }
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBtnGroupTipoContenido = new javax.swing.ButtonGroup();
        jPnlDatosGenerales = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTxtCodigoContenidoAudiovisual = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        jTxtTituloContenidoAudioVisual = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jCbxGeneros = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jRbdPelicula = new javax.swing.JRadioButton();
        jRbdSerie = new javax.swing.JRadioButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPnlPelicula = new javax.swing.JPanel();
        jPnlPeliculaSub = new javax.swing.JPanel();
        jChxGanadoOscar = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        jCbxNombreDirector = new javax.swing.JComboBox<>();
        jPnlSerie = new javax.swing.JPanel();
        jPnlSerieSub = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jSpnNumeroCapitulos = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        jSpnNumeroTemporada = new javax.swing.JSpinner();
        jBtnIngresarTemporada = new javax.swing.JButton();
        jBtnIngresarTemporadaExtra = new javax.swing.JButton();
        jChxEsCompleta = new javax.swing.JCheckBox();
        jBtnInformacionTemporadas = new javax.swing.JButton();
        jChxEsOriginal = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLstIdiomasDisponibles = new javax.swing.JList<>();
        jBtnAgregarIdioma = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jCbxAnno = new javax.swing.JComboBox<>();
        jCbxMes = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jBtnIngresarContenido = new javax.swing.JButton();
        jBtnAtras = new javax.swing.JButton();
        jLblFondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jPnlDatosGenerales.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPnlDatosGenerales.setOpaque(false);
        jPnlDatosGenerales.setLayout(null);

        jLabel1.setText("Codigo:");
        jPnlDatosGenerales.add(jLabel1);
        jLabel1.setBounds(20, 12, 63, 23);

        try {
            jTxtCodigoContenidoAudiovisual.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("UUU-###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jTxtCodigoContenidoAudiovisual.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtCodigoContenidoAudiovisualFocusLost(evt);
            }
        });
        jPnlDatosGenerales.add(jTxtCodigoContenidoAudiovisual);
        jTxtCodigoContenidoAudiovisual.setBounds(20, 41, 110, 29);

        jLabel2.setText("Titulo del contenido:");
        jPnlDatosGenerales.add(jLabel2);
        jLabel2.setBounds(20, 76, 125, 23);
        jPnlDatosGenerales.add(jTxtTituloContenidoAudioVisual);
        jTxtTituloContenidoAudioVisual.setBounds(20, 105, 305, 33);

        jLabel3.setText("Mes y a√±o de creacion del contenido:");
        jPnlDatosGenerales.add(jLabel3);
        jLabel3.setBounds(20, 150, 221, 25);

        jLabel6.setText("Genero:");
        jPnlDatosGenerales.add(jLabel6);
        jLabel6.setBounds(180, 16, 107, 15);

        jPnlDatosGenerales.add(jCbxGeneros);
        jCbxGeneros.setBounds(180, 43, 145, 24);

        jLabel7.setText("Tipo de contenido audiovisual:");
        jPnlDatosGenerales.add(jLabel7);
        jLabel7.setBounds(404, 12, 197, 23);

        jBtnGroupTipoContenido.add(jRbdPelicula);
        jRbdPelicula.setText("Pelicula");
        jRbdPelicula.setOpaque(false);
        jRbdPelicula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRbdPeliculaActionPerformed(evt);
            }
        });
        jPnlDatosGenerales.add(jRbdPelicula);
        jRbdPelicula.setBounds(404, 44, 74, 23);

        jBtnGroupTipoContenido.add(jRbdSerie);
        jRbdSerie.setText("Serie");
        jRbdSerie.setOpaque(false);
        jRbdSerie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRbdSerieActionPerformed(evt);
            }
        });
        jPnlDatosGenerales.add(jRbdSerie);
        jRbdSerie.setBounds(496, 44, 74, 23);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        jPnlPeliculaSub.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jChxGanadoOscar.setText("Ha ganado un Oscar?");

        jLabel8.setText("Nombre del director:");

        javax.swing.GroupLayout jPnlPeliculaSubLayout = new javax.swing.GroupLayout(jPnlPeliculaSub);
        jPnlPeliculaSub.setLayout(jPnlPeliculaSubLayout);
        jPnlPeliculaSubLayout.setHorizontalGroup(
            jPnlPeliculaSubLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPnlPeliculaSubLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPnlPeliculaSubLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jCbxNombreDirector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPnlPeliculaSubLayout.createSequentialGroup()
                        .addGroup(jPnlPeliculaSubLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jChxGanadoOscar, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 17, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPnlPeliculaSubLayout.setVerticalGroup(
            jPnlPeliculaSubLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlPeliculaSubLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jChxGanadoOscar)
                .addGap(18, 18, 18)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jCbxNombreDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(97, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPnlPeliculaLayout = new javax.swing.GroupLayout(jPnlPelicula);
        jPnlPelicula.setLayout(jPnlPeliculaLayout);
        jPnlPeliculaLayout.setHorizontalGroup(
            jPnlPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPnlPeliculaSub, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPnlPeliculaLayout.setVerticalGroup(
            jPnlPeliculaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPnlPeliculaSub, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Pelicula", jPnlPelicula);

        jPnlSerieSub.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPnlSerieSub.setOpaque(false);

        jLabel9.setText("Area de ingreso de temporadas:");

        jLabel10.setText("Numero de temporada: ");

        jSpnNumeroCapitulos.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        jSpnNumeroCapitulos.setOpaque(false);

        jLabel11.setText("Cantidad de capitulos: ");

        jSpnNumeroTemporada.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        jSpnNumeroTemporada.setOpaque(false);

        jBtnIngresarTemporada.setText("Ingresar");
        jBtnIngresarTemporada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnIngresarTemporadaActionPerformed(evt);
            }
        });

        jBtnIngresarTemporadaExtra.setText("Extra");
        jBtnIngresarTemporadaExtra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnIngresarTemporadaExtraActionPerformed(evt);
            }
        });

        jChxEsCompleta.setText("Esta completa ?");
        jChxEsCompleta.setOpaque(false);

        jBtnInformacionTemporadas.setText("Informacion");
        jBtnInformacionTemporadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnInformacionTemporadasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPnlSerieSubLayout = new javax.swing.GroupLayout(jPnlSerieSub);
        jPnlSerieSub.setLayout(jPnlSerieSubLayout);
        jPnlSerieSubLayout.setHorizontalGroup(
            jPnlSerieSubLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlSerieSubLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPnlSerieSubLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPnlSerieSubLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSpnNumeroCapitulos, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPnlSerieSubLayout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10))
                    .addGroup(jPnlSerieSubLayout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpnNumeroTemporada, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jChxEsCompleta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPnlSerieSubLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPnlSerieSubLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jBtnInformacionTemporadas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPnlSerieSubLayout.createSequentialGroup()
                                .addComponent(jBtnIngresarTemporadaExtra)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtnIngresarTemporada, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPnlSerieSubLayout.setVerticalGroup(
            jPnlSerieSubLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlSerieSubLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jChxEsCompleta)
                .addGap(9, 9, 9)
                .addGroup(jPnlSerieSubLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpnNumeroTemporada, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPnlSerieSubLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSpnNumeroCapitulos, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPnlSerieSubLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtnIngresarTemporada)
                    .addComponent(jBtnIngresarTemporadaExtra))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnInformacionTemporadas)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPnlSerieLayout = new javax.swing.GroupLayout(jPnlSerie);
        jPnlSerie.setLayout(jPnlSerieLayout);
        jPnlSerieLayout.setHorizontalGroup(
            jPnlSerieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPnlSerieSub, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPnlSerieLayout.setVerticalGroup(
            jPnlSerieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPnlSerieSub, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Serie", jPnlSerie);

        jPnlDatosGenerales.add(jTabbedPane1);
        jTabbedPane1.setBounds(404, 105, 244, 270);

        jChxEsOriginal.setText("Contenido orginal de la plataforma?");
        jChxEsOriginal.setOpaque(false);
        jPnlDatosGenerales.add(jChxEsOriginal);
        jChxEsOriginal.setBounds(404, 76, 244, 23);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Idiomas disponibles:"));
        jPanel2.setOpaque(false);

        jLstIdiomasDisponibles.setModel(modeloOrigen);
        jScrollPane1.setViewportView(jLstIdiomasDisponibles);

        jBtnAgregarIdioma.setText("Agregar");
        jBtnAgregarIdioma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAgregarIdiomaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnAgregarIdioma))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jBtnAgregarIdioma, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPnlDatosGenerales.add(jPanel2);
        jPanel2.setBounds(20, 212, 241, 166);

        jLabel4.setText("Mes: ");
        jPnlDatosGenerales.add(jLabel4);
        jLabel4.setBounds(20, 179, 44, 27);

        jLabel5.setText("A√±o: ");
        jPnlDatosGenerales.add(jLabel5);
        jLabel5.setBounds(120, 180, 40, 30);

        jCbxAnno.setOpaque(false);
        jPnlDatosGenerales.add(jCbxAnno);
        jCbxAnno.setBounds(160, 180, 70, 30);

        jCbxMes.setOpaque(false);
        jPnlDatosGenerales.add(jCbxMes);
        jCbxMes.setBounds(50, 180, 60, 30);

        getContentPane().add(jPnlDatosGenerales);
        jPnlDatosGenerales.setBounds(20, 20, 660, 390);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones finales"));
        jPanel1.setOpaque(false);

        jBtnIngresarContenido.setText("Terminado");
        jBtnIngresarContenido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnIngresarContenidoActionPerformed(evt);
            }
        });

        jBtnAtras.setText("Atras");
        jBtnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAtrasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jBtnIngresarContenido, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(jBtnAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnIngresarContenido, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(200, 410, 300, 90);

        jLblFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fondo_Pantalla_Ventanas/FondoPantallaAdminReporte1.jpg"))); // NOI18N
        getContentPane().add(jLblFondo);
        jLblFondo.setBounds(0, 0, 705, 550);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
  //===================================================================================================
    // metodos que se ejecutan dal abrirse esta ventana
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // acciones que se jecutan al abrir
        switch (tipoAdministrador) {
            case AGREGAR:
               this.opcionAgregar();
                setTitle("Nuevo Contenido Audiovisual");
                break;
            case MODIFICAR:
                this.opcionModificar();
                setTitle("Modificar Contenido Audiovisual");
                break;
            case CONSULTAR:
                this.opcionConsultar();
                setTitle("Consulta de un Contenido Audiovisual");
                break;
        }
         jTxtCodigoContenidoAudiovisual.setText(codigo);
         this.limpiarCamposTODOS();
         try {
           contenidoAudioVisual = ContenidoAudioVisual.consultarContenidoAudiovisual(codigo);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al buscar el contenido audiovisual\n"+
                e.toString() + "\n" + e.getMessage() , "ERROR ENCONTRADO:",JOptionPane.ERROR_MESSAGE);
        }  
        if(contenidoAudioVisual != null){
           this.llenoCampos_Modificar_Consulta();
            
        }
        
    }//GEN-LAST:event_formWindowOpened
//====================================================================================================
 
  
    
//************************************************************************************************************************************************************
  // Eventos de botones principales de la ventana   
 // ******boton que se encarga de crear el contenido audiovisual  MAS IMPORTANTE
    private void jBtnIngresarContenidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnIngresarContenidoActionPerformed
       if(this.jTxtCodigoContenidoAudiovisual.getText().isEmpty() || this.jTxtCodigoContenidoAudiovisual.getText().equals("   -   ")){
            JOptionPane.showMessageDialog(this, "Favor ingresar un codigo del contenido valido" ,
                    "ERROR ENCONTRADO:",JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(this.jTxtTituloContenidoAudioVisual.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Favor ingresar un titulo del contenido valido" 
                    , "ERROR ENCONTRADO:",JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(this.jCbxGeneros.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(this, "Favor seleccionar un genero valido" 
                    , "ERROR ENCONTRADO:",JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(this.arrayIdiomas.isEmpty()){
            JOptionPane.showMessageDialog(this, "Favor seleccionar un idioma disponible valido" 
                    , "ERROR ENCONTRADO:",JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(this.jCbxAnno.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(this, "Favor seleccionar un a√±o valido" 
                    , "ERROR ENCONTRADO:",JOptionPane.ERROR_MESSAGE);
            return;
        }  
        if(this.jCbxMes.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(this, "Favor seleccionar un mes valido" 
                    , "ERROR ENCONTRADO:",JOptionPane.ERROR_MESSAGE);
            return;
        } 
        if(!this.jRbdPelicula.isSelected() && !this.jRbdSerie.isSelected()){
            JOptionPane.showMessageDialog(this, "Favor seleccionar un tipo de contenido a ingresar valido" 
                    , "ERROR ENCONTRADO:",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        
        
        
                 String titulo= this.jTxtTituloContenidoAudioVisual.getText();
                 String codigop=this.jTxtCodigoContenidoAudiovisual.getText();
                 TIPO_GENERO genero=(TIPO_GENERO)this.jCbxGeneros.getSelectedItem();
                 Boolean esOriginal= this.jChxEsOriginal.isSelected();
                                int mes= Integer.parseInt((String)this.jCbxMes.getSelectedItem());
                                int anno=Integer.parseInt((String)this.jCbxAnno.getSelectedItem());
                     
                                
           if(tipoAdministrador.equals(TIPO_ADMIN_OPCION.MODIFICAR)){
               
              this.contenidoAudioVisual.setAnnoCreacion(LocalDateTime.of(anno,mes, 1, 1, 1));
              this.contenidoAudioVisual.setTitulo(titulo);
              this.contenidoAudioVisual.setGenero(genero);
              this.contenidoAudioVisual.setEsOriginal(esOriginal);
              
              if(contenidoAudioVisual instanceof ContenidoPelicula){
                  String director= (String)this.jCbxNombreDirector.getSelectedItem();
                  Boolean ganOscar=this.jChxGanadoOscar.isSelected();
                  ((ContenidoPelicula)contenidoAudioVisual).setDirector(director);
                  ((ContenidoPelicula)contenidoAudioVisual).setGanadoPremio(ganOscar);
              }
              if(contenidoAudioVisual instanceof ContenidoSerie){
                  if(!arrayTemporada.isEmpty()){
                     for (Temporada temporada : arrayTemporada) {
                         ((ContenidoSerie)contenidoAudioVisual).agregarTemporada(temporada);
                        }
                    }
                  Boolean esCompleta= this.jChxEsCompleta.isSelected();
                  ((ContenidoSerie)contenidoAudioVisual).setEsCompleta(esCompleta);
              }                  
               
              FrmVentana_Admin.setContenidoAudVis(contenidoAudioVisual);
              this.dispose();
                             
           }// fin de modificar 
           
           
            if(tipoAdministrador.equals(TIPO_ADMIN_OPCION.AGREGAR)){
      
                       //========================CREACION OBJETOS=======================       
                       
                                if(this.jRbdPelicula.isSelected()){ // si el administrador selecciona crear una pelicula
                                     if(this.jCbxNombreDirector.getSelectedIndex()==-1){
                                        JOptionPane.showMessageDialog(this, "Favor seleccionar un nombre de director valido" 
                                                , "ERROR ENCONTRADO:",JOptionPane.ERROR_MESSAGE);
                                         return;       
                                      }
                                    String director= (String)this.jCbxNombreDirector.getSelectedItem();
                                    Boolean ganOscar=this.jChxGanadoOscar.isSelected();
  ContenidoAudioVisual contenido = new ContenidoPelicula(ganOscar,director,esOriginal,codigop,titulo,LocalDateTime.of(anno,mes, 1, 1, 1));
                                    contenido.setGenero(genero);                            
                                    for (TIPOS_IDIOMAS arrayIdioma : arrayIdiomas) {
                                        contenido.agregarIdioma(arrayIdioma);
                                    }
                                    FrmVentana_Admin.setContenidoAudVis(contenido);
                                    this.dispose();
                                }
//--------------------------------------------------------------------------------------------------------------------------------------
                                if(this.jRbdSerie.isSelected()){// si el administrador selecciona crear una serie
                                    Boolean esCompleta= this.jChxEsCompleta.isSelected();
                                    if(this.arrayTemporada.isEmpty()){
                                        JOptionPane.showMessageDialog(this, "Favor ingresar una temporada" 
                                                , "ERROR ENCONTRADO:",JOptionPane.ERROR_MESSAGE);
                                         return; 
                                    }
  ContenidoAudioVisual contenido = new ContenidoSerie(codigo, titulo,LocalDateTime.of(anno,mes, 1, 1, 1),esOriginal,esCompleta);
                                    contenido.setGenero(genero);
                                    for (TIPOS_IDIOMAS arrayIdioma : arrayIdiomas) {
                                        contenido.agregarIdioma(arrayIdioma);
                                     }
                                     for (Temporada temporada : arrayTemporada) {
                                        ((ContenidoSerie)contenido).agregarTemporada(temporada);
                                    }
                                     //Lo mando a la otra ventana principal para que pueda ser agregado al archivo
                                     FrmVentana_Admin.setContenidoAudVis(contenido);
                                     this.dispose();
                                }                 
                                
            }
    }//GEN-LAST:event_jBtnIngresarContenidoActionPerformed

    private void jBtnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAtrasActionPerformed
        FrmVentana_Admin.setContenidoAudVis(null);
        this.arrayIdiomas.clear();
        this.arrayTemporada.clear();
        this.dispose();
    }//GEN-LAST:event_jBtnAtrasActionPerformed
//************************************************************************************************************************************************************
  
    
     //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
    
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<ACCIONES EXTRA>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   // Boton para agregar los Idiomas y temporadas  al  ArraylistAuxiliar, para luego cargarlo en el de la serie
    private void jBtnAgregarIdiomaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAgregarIdiomaActionPerformed
        // pasa de la lista al arrayList
       int indice = jLstIdiomasDisponibles.getSelectedIndex();
       if(indice >= 0){
           this.arrayIdiomas.add(this.jLstIdiomasDisponibles.getSelectedValue());
           modeloOrigen.remove(indice);
       }
       else{
           JOptionPane.showMessageDialog(null, "Debe seleccionar un idioma de la lista" 
                   , "ERROR ENCONTRADO:",JOptionPane.ERROR_MESSAGE);
       }
    }//GEN-LAST:event_jBtnAgregarIdiomaActionPerformed

    private void jRbdPeliculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRbdPeliculaActionPerformed
        // Accion que sucede cuando este boton es seleccionado
        if(this.jRbdPelicula.isSelected()){
            this.jTabbedPane1.setEnabledAt(1, false);
            this.jTabbedPane1.setEnabledAt(0, true);
            this.jTabbedPane1.setSelectedIndex(0);
            
            this.jPnlPeliculaSub.setVisible(true);
            this.jPnlSerieSub.setVisible(false); 
            
            this.camposActivadosPelicula();
            this.camposDesactivadosSerie();
        }
    }//GEN-LAST:event_jRbdPeliculaActionPerformed

    private void jRbdSerieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRbdSerieActionPerformed
        // accion que sucede cuando este boton es seleccionado
        if(this.jRbdSerie.isSelected()){
            this.jTabbedPane1.setEnabledAt(0, false);
            this.jTabbedPane1.setEnabledAt(1, true);
            this.jTabbedPane1.setSelectedIndex(1);
            
            this.jPnlSerieSub.setVisible(true); 
            this.jPnlPeliculaSub.setVisible(false);
            
            this.camposActivadosSerie();
            this.camposDesactivadosPelicula();
        }
    }//GEN-LAST:event_jRbdSerieActionPerformed

    private void jTxtCodigoContenidoAudiovisualFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtCodigoContenidoAudiovisualFocusLost
   if(tipoAdministrador== tipoAdministrador.AGREGAR){
            try {
                codigo= jTxtCodigoContenidoAudiovisual.getText();
                contenidoAudioVisual = ContenidoAudioVisual.consultarContenidoAudiovisual(codigo);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,"Error al buscar el contenido audio visual\n"+e.toString() + "\n" +e.getMessage() 
                        , "ERROR ENCONTRADO:",JOptionPane.ERROR_MESSAGE);
            }
            if(contenidoAudioVisual != null){
                JOptionPane.showMessageDialog(this,
                    "El contenido audiovisual existe" , "ERROR ENCONTRADO:",JOptionPane.ERROR_MESSAGE);
                jTxtCodigoContenidoAudiovisual.selectAll();
                return;
            }
        }
    }//GEN-LAST:event_jTxtCodigoContenidoAudiovisualFocusLost

    private void jBtnIngresarTemporadaExtraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnIngresarTemporadaExtraActionPerformed
        // setea los contadores nuevamente a su incial valor:
        this.jBtnIngresarTemporadaExtra.setEnabled(false);
        this.jBtnIngresarTemporada.setEnabled(true);
        SpinnerModel modelo1 = new SpinnerNumberModel(1, 1, Integer.MAX_VALUE, 1);
        SpinnerModel modelo2 = new SpinnerNumberModel(1, 1, Integer.MAX_VALUE, 1);
        this.jSpnNumeroCapitulos.setModel(modelo1);
        this.jSpnNumeroTemporada.setModel(modelo2);

    }//GEN-LAST:event_jBtnIngresarTemporadaExtraActionPerformed

  //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 // Eventos de la ventana interna de << SERIE >>
    private void jBtnIngresarTemporadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnIngresarTemporadaActionPerformed
        // guarda cada temporada en el arraylist
        int temporada= (Integer)this.jSpnNumeroTemporada.getValue();
        int episodios= (Integer)this.jSpnNumeroCapitulos.getValue();
        String h="";
        Temporada temp = new Temporada(temporada, episodios);

        if(!this.arrayIdiomas.isEmpty()){
            if(!Validacion.validacionExistenciaTemporada(temporada, arrayTemporada)){
                this.arrayTemporada.add(temp);
            }else{
                
                for (Temporada temporada1 : arrayTemporada) {
                    h+=temporada1.toString()+"\n";
                    }
                
                JOptionPane.showMessageDialog(this, "Favor ingresar otra temporada, la ingresada ya existe para la serie\n\n"+h
                    , "ERROR ENCONTRADO:",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }else if(this.arrayIdiomas.isEmpty()){
            this.arrayTemporada.add(temp);
        }
        
        
        
       
        
        
        this.jBtnIngresarTemporada.setEnabled(false);
        this.jBtnIngresarTemporadaExtra.setEnabled(true);
        contadorTemporada++;
    }//GEN-LAST:event_jBtnIngresarTemporadaActionPerformed

    private void jBtnInformacionTemporadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnInformacionTemporadasActionPerformed
        if(this.arrayIdiomas.isEmpty()){
            JOptionPane.showMessageDialog(this, "Favor ingresar una temporada,la serie aun no posee temporadas\n"
                    , "ERROR ENCONTRADO:",JOptionPane.WARNING_MESSAGE);
                return;
            }else{
            String h="";
                for (Temporada temporada1 : arrayTemporada) {
                    h+=temporada1.toString()+"\n";
                    }
                
                JOptionPane.showMessageDialog(this, "TEMPORADAS INGRESADAS HASTA EL MOMENTO: \n\n"+h
                    , "INFORMACION:",JOptionPane.INFORMATION_MESSAGE);
                return;
        }
    }//GEN-LAST:event_jBtnInformacionTemporadasActionPerformed
  // <<<<<<<<<<<<<<<<<<<<<<<<<<<ACCIONES EXTRA>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    

    
    // <<<<<<<[ METODOS INTERNOS (VALIDACIONES / (ACTIVO/INACTIVO) ]>>>>>>> 
    public void limpiarCamposTODOS(){
//        this.jTxtNombreDirecto.setText("");
       // this.jTxtCodigoContenidoAudiovisual.setText("");
       
        this.jPnlPeliculaSub.setVisible(false);
        this.jPnlSerieSub.setVisible(false); 
        
        this.jTxtTituloContenidoAudioVisual.setText("");
        
    } 
    public void validacionCamposVacios(){
        if(this.jTxtCodigoContenidoAudiovisual.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Favor ingresar un codigo del contenido valido" 
                    , "ERROR ENCONTRADO:",JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(this.jTxtTituloContenidoAudioVisual.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Favor ingresar un titulo del contenido valido" 
                    , "ERROR ENCONTRADO:",JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(this.jCbxGeneros.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(this, "Favor seleccionar un genero valido" 
                    , "ERROR ENCONTRADO:",JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(this.arrayIdiomas.isEmpty()){
            JOptionPane.showMessageDialog(this, "Favor seleccionar un idioma disponible valido" 
                    , "ERROR ENCONTRADO:",JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(this.jCbxAnno.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(this, "Favor seleccionar un a√±o valido" 
                    , "ERROR ENCONTRADO:",JOptionPane.ERROR_MESSAGE);
            return;
        }  
        if(this.jCbxMes.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(this, "Favor seleccionar un mes valido" 
                    , "ERROR ENCONTRADO:",JOptionPane.ERROR_MESSAGE);
            return;
        } 
        
        
    }// valida TODOS los campos vacios
    public void validacionCamposPelicula(){
        if(this.jCbxNombreDirector.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(this, "Favor seleccionar un nombre de director valido" 
                    , "ERROR ENCONTRADO:",JOptionPane.ERROR_MESSAGE);
            return;       
        }
    } // valida el campo de pelicula
    public boolean validacionCampoPeliculaOscar(){
        if(this.jChxGanadoOscar.isSelected()){
            return true;
        }
        return false;
    }
    public boolean validacionCampoEsOriginal(){
        if(this.jChxEsOriginal.isSelected()){
            return true;
        }
        return false;
    }
    public String conersionNumero(String numero){
        String mesAux=numero;
         if(numero.contains("0")){
             mesAux= numero.replace("0", "");
          }
         return mesAux;
    }
    public void validacionFecha(int mes, int anno){
        if(mes>12 ||mes <=0){
             JOptionPane.showMessageDialog(this, "Favor ingresar un mes valido" 
                     , "ERROR ENCONTRADO:",JOptionPane.ERROR_MESSAGE);
            return;  
        }
        if(anno>20){
             JOptionPane.showMessageDialog(this, "Favor ingresar un a√±o valido" 
                     , "ERROR ENCONTRADO:",JOptionPane.ERROR_MESSAGE);
            return;  
        }
    }
    public void camposDesactivadosPelicula(){
        //this.jTxtNombreDirecto.setEnabled(false);
        this.jChxGanadoOscar.setEnabled(false);
    }
    public void camposActivadosPelicula(){
       // this.jTxtNombreDirecto.setEnabled(true);
        this.jChxGanadoOscar.setEnabled(true);
    }
    public void camposDesactivadosSerie(){
        this.jSpnNumeroCapitulos.setEnabled(false);
        this.jSpnNumeroTemporada.setEnabled(false);
        this.jBtnIngresarTemporada.setEnabled(false);
        this.jBtnIngresarTemporadaExtra.setEnabled(false);
    }
    public void camposActivadosSerie(){
        this.jSpnNumeroCapitulos.setEnabled(true);
        this.jSpnNumeroTemporada.setEnabled(true);
        this.jBtnIngresarTemporada.setEnabled(true);
        this.jBtnIngresarTemporadaExtra.setEnabled(false);
    } 
    // <<<<<<<<<<<<<<<<<<[FIN DE METODOS INTERNOS]>>>>>>>>>>>>>>>>>>>
    
    
    
    // ***********************OPCIONES ADMINISTRADOR**************************
    public void opcionConsultar(){
        this.jTxtCodigoContenidoAudiovisual.setEditable(false);
        this.jTxtTituloContenidoAudioVisual.setEditable(false);
        this.jCbxNombreDirector.setEditable(false);
        this.jBtnAgregarIdioma.setEnabled(false);
        this.jCbxGeneros.setEditable(false);
        
        this.jBtnIngresarContenido.setEnabled(false);
        
   
    }
    public void opcionModificar(){
        this.jTxtCodigoContenidoAudiovisual.setEditable(false);
        this.jTxtTituloContenidoAudioVisual.selectAll();
        
        
       // this.jTxtNombreDirecto.selectAll();
    }
    public void opcionAgregar(){
        this.jBtnIngresarTemporadaExtra.setEnabled(false);
        this.llenoComboGeneros();
        this.llenoListaIdiomas();
        this.llenoComboMes();
        this.llenoComboAnno();
        this.llenoComboDirector();
        this.limpiarCamposTODOS();
    }
    public void llenoCampos_Modificar_Consulta(){
        this.arrayIdiomas.clear();
        
        this.jBtnIngresarTemporada.setEnabled(false);
        this.jBtnIngresarTemporadaExtra.setEnabled(false);
        
        this.llenoDatosDirector();
        
        this.jTxtCodigoContenidoAudiovisual.setText(contenidoAudioVisual.getCodigo());
        this.jTxtTituloContenidoAudioVisual.setText(contenidoAudioVisual.getTitulo());
        
        for (TIPOS_IDIOMAS value : contenidoAudioVisual.getIdiomasDisponibles()) {
            modeloOrigen.addElement(value);
            this.arrayIdiomas.add(value);
        }
        
        this.jCbxMes.addItem(Integer.toString(this.contenidoAudioVisual.getAnnoCreacion().getMonthValue()));
        this.jCbxMes.setSelectedItem(Integer.toString(this.contenidoAudioVisual.getAnnoCreacion().getMonthValue()));
        this.jCbxAnno.addItem(Integer.toString(this.contenidoAudioVisual.getAnnoCreacion().getYear()));
        this.jCbxMes.setSelectedItem(Integer.toString(this.contenidoAudioVisual.getAnnoCreacion().getYear()));
        
        
        if(tipoAdministrador.equals(TIPO_ADMIN_OPCION.MODIFICAR) &&
                     contenidoAudioVisual instanceof ContenidoPelicula){
            
            for (String arrayDirectore : arrayDirectores) {
                if(!((ContenidoPelicula)contenidoAudioVisual).getDirector().equals(arrayDirectore) ){
                 this.jCbxNombreDirector.addItem(arrayDirectore);
            }
            }
            
        }
        
        
        
        if(tipoAdministrador.equals(TIPO_ADMIN_OPCION.MODIFICAR)){
            for (int i = 2020; i >= 1960; i--) {
                if(this.contenidoAudioVisual.getAnnoCreacion().getYear()!=i){
                this.jCbxAnno.addItem(Integer.toString(i));
                }
            }
            for(int i=1;i<=12;i++){
                if(this.contenidoAudioVisual.getAnnoCreacion().getMonthValue()!=i){
                this.jCbxMes.addItem(Integer.toString(i));
                }
            }
            
            for (TIPO_GENERO genero : TIPO_GENERO.values()) {
                    if(!contenidoAudioVisual.getGenero().equals(genero)){
                        this.jCbxGeneros.addItem(genero);
            }
            }
            this.jBtnIngresarTemporada.setEnabled(true);
        }

        this.jCbxGeneros.addItem(contenidoAudioVisual.getGenero());
        this.jCbxGeneros.setSelectedItem(contenidoAudioVisual.getGenero());
        this.jBtnAgregarIdioma.setEnabled(false);
        this.jChxEsOriginal.setSelected(contenidoAudioVisual.isEsOriginal());
        
        if(contenidoAudioVisual instanceof ContenidoPelicula){
            this.jRbdPelicula.setSelected(true);
            this.jRbdSerie.setEnabled(false);
            this.jTabbedPane1.setEnabledAt(1, false);
            this.jTabbedPane1.setEnabledAt(0, true);
            this.jTabbedPane1.setSelectedIndex(0);
            this.jChxGanadoOscar.setSelected( ((ContenidoPelicula)contenidoAudioVisual).isGanadoPremio() );
            //this.jTxtNombreDirecto.setText(((ContenidoPelicula)contenidoAudioVisual).getDirector());
            
           this.jCbxNombreDirector.setEnabled(true);
           this.jCbxNombreDirector.addItem(((ContenidoPelicula)contenidoAudioVisual).getDirector());
           this.jCbxNombreDirector.setSelectedItem(((ContenidoPelicula)contenidoAudioVisual).getDirector());
           
            this.jPnlPeliculaSub.setVisible(true);
            this.jPnlSerieSub.setVisible(false); 

        }
        
        if(contenidoAudioVisual instanceof ContenidoSerie){
            this.jRbdSerie.setSelected(true);
            this.jRbdPelicula.setEnabled(false);
            this.jChxEsCompleta.setSelected(((ContenidoSerie)contenidoAudioVisual).isEsCompleta());
            this.jTabbedPane1.setEnabledAt(0, false);
            this.jTabbedPane1.setEnabledAt(1, true);
            this.jTabbedPane1.setSelectedIndex(1);
             this.arrayTemporada= ((ContenidoSerie)contenidoAudioVisual).getTemporadas();
            
            this.jPnlPeliculaSub.setVisible(false);
            this.jPnlSerieSub.setVisible(true); 
        }
    }
    //**************************************************************************************
    
    
     
    //Lleno estructuras dentro del JDlg (Combos y listas)
    public void llenoListaIdiomas(){
          //Declara un modelo para cada Lista (Hay que digitarlo)
        for (TIPOS_IDIOMAS value : TIPOS_IDIOMAS.values()) {
            modeloOrigen.addElement(value);
        }
    }
    public void llenoComboGeneros(){
        for (TIPO_GENERO genero : TIPO_GENERO.values()) {
            this.jCbxGeneros.addItem(genero);
        }
    }
    public void llenoComboMes(){
        for(int i=1;i<=12;i++){
                this.jCbxMes.addItem(Integer.toString(i));
            }
    }
    public void llenoComboAnno(){
        for (int i = ANNO_ACTUAL; i >= ANNO_MINIMO; i--) {
                this.jCbxAnno.addItem(Integer.toString(i));   
            }
    }
    public void llenoDatosDirector(){
        this.arrayDirectores.add("Steven Spielberg");
          this.arrayDirectores.add("Peter Jackson");
          this.arrayDirectores.add("Martin Scorsese");
          this.arrayDirectores.add("Ingmar Bergman");
          this.arrayDirectores.add("Roman Polanski");
          this.arrayDirectores.add("William Wyler");
          this.arrayDirectores.add("John Lasseter");
          this.arrayDirectores.add("Lars von Trier");
          this.arrayDirectores.add("Robert Zemeckis");
    }
    public void llenoComboDirector(){
          this.arrayDirectores.add("Steven Spielberg");
          this.arrayDirectores.add("Peter Jackson");
          this.arrayDirectores.add("Martin Scorsese");
          this.arrayDirectores.add("Ingmar Bergman");
          this.arrayDirectores.add("Roman Polanski");
          this.arrayDirectores.add("William Wyler");
          this.arrayDirectores.add("John Lasseter");
          this.arrayDirectores.add("Lars von Trier");
          this.arrayDirectores.add("Robert Zemeckis");
            
          for (String arrayDirectore : arrayDirectores) {
              this.jCbxNombreDirector.addItem(arrayDirectore);
        }
          
    }
            
    
    
//
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(JDlgVentana_AdminCatalogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(JDlgVentana_AdminCatalogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(JDlgVentana_AdminCatalogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(JDlgVentana_AdminCatalogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                JDlgVentana_AdminCatalogo dialog = new JDlgVentana_AdminCatalogo(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnAgregarIdioma;
    private javax.swing.JButton jBtnAtras;
    private javax.swing.ButtonGroup jBtnGroupTipoContenido;
    private javax.swing.JButton jBtnInformacionTemporadas;
    private javax.swing.JButton jBtnIngresarContenido;
    private javax.swing.JButton jBtnIngresarTemporada;
    private javax.swing.JButton jBtnIngresarTemporadaExtra;
    private javax.swing.JComboBox<String> jCbxAnno;
    private javax.swing.JComboBox<TIPO_GENERO> jCbxGeneros;
    private javax.swing.JComboBox<String> jCbxMes;
    private javax.swing.JComboBox<String> jCbxNombreDirector;
    private javax.swing.JCheckBox jChxEsCompleta;
    private javax.swing.JCheckBox jChxEsOriginal;
    private javax.swing.JCheckBox jChxGanadoOscar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLblFondo;
    private javax.swing.JList<TIPOS_IDIOMAS> jLstIdiomasDisponibles;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPnlDatosGenerales;
    private javax.swing.JPanel jPnlPelicula;
    private javax.swing.JPanel jPnlPeliculaSub;
    private javax.swing.JPanel jPnlSerie;
    private javax.swing.JPanel jPnlSerieSub;
    private javax.swing.JRadioButton jRbdPelicula;
    private javax.swing.JRadioButton jRbdSerie;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpnNumeroCapitulos;
    private javax.swing.JSpinner jSpnNumeroTemporada;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JFormattedTextField jTxtCodigoContenidoAudiovisual;
    private javax.swing.JTextField jTxtTituloContenidoAudioVisual;
    // End of variables declaration//GEN-END:variables
}
